// chain-wise primitives and modules

use primitives::{AccountId, CurrencyId, TokenId};

use laguna_runtime::{
	constants::{LAGUNAS, LAGUNA_NATIVE_CURRENCY},
	impl_pallet_treasury::TreasuryPalletId,
	AuraConfig, EvmCompat, FeeEnablementConfig, GenesisConfig, GrandpaConfig, SudoConfig,
	SystemConfig, TokensConfig, TreasuryConfig, WASM_BINARY,
};

use sp_consensus_aura::sr25519::AuthorityId as AuraId;
use sp_finality_grandpa::AuthorityId as GrandpaId;

use super::util::{
	authority_keys_from_seed, get_account_id_from_seed, laguna_chain_spec_properties,
};
use sc_service::ChainType;
use sp_core::{sr25519, H160};
use sp_runtime::traits::AccountIdConversion;

// Spec derived from runtiem GenisisConfig
pub type ChainSpec = sc_service::GenericChainSpec<GenesisConfig>;

pub fn local_testnet_config() -> Result<ChainSpec, String> {
	let wasm_binary =
		WASM_BINARY.ok_or_else(|| -> String { "dev runtime wasm blob missing".into() })?;

	// create genesis state from preconfigured accounts
	Ok(ChainSpec::from_genesis(
		// Name
		"Local Testnet",
		// ID
		"local_testnet",
		ChainType::Local,
		move || {
			let pallet_system_contract_deployer_id =
				<laguna_runtime::Runtime as pallet_system_contract_deployer::Config>::PalletId::get()
					.try_into_account().expect("Invalid PalletId");

			testnet_genesis(
				wasm_binary,
				// Initial PoA authorities
				vec![authority_keys_from_seed("Alice"), authority_keys_from_seed("Bob")],
				// Sudo account
				get_account_id_from_seed::<sr25519::Public>("Alice"),
				vec![
					get_account_id_from_seed::<sr25519::Public>("Alice"),
					get_account_id_from_seed::<sr25519::Public>("Bob"),
					get_account_id_from_seed::<sr25519::Public>("Charlie"),
					get_account_id_from_seed::<sr25519::Public>("Dave"),
					get_account_id_from_seed::<sr25519::Public>("Eve"),
					get_account_id_from_seed::<sr25519::Public>("Ferdie"),
					get_account_id_from_seed::<sr25519::Public>("Alice//stash"),
					get_account_id_from_seed::<sr25519::Public>("Bob//stash"),
					get_account_id_from_seed::<sr25519::Public>("Charlie//stash"),
					get_account_id_from_seed::<sr25519::Public>("Dave//stash"),
					get_account_id_from_seed::<sr25519::Public>("Eve//stash"),
					get_account_id_from_seed::<sr25519::Public>("Ferdie//stash"),
					pallet_system_contract_deployer_id,
				], // prefund accounts
				vec![],
			)
		},
		// Bootnodes
		vec![],
		// Telemetry
		None,
		// Protocol ID
		None,
		// Properties
		None,
		// Extensions
		Some(laguna_chain_spec_properties()),
		None,
	))
}

pub fn devnet_config() -> Result<ChainSpec, String> {
	let wasm_binary =
		WASM_BINARY.ok_or_else(|| -> String { "dev runtime wasm blob missing".into() })?;

	// create genesis state from preconfigured accounts
	Ok(ChainSpec::from_genesis(
		// Name
		"Development",
		// ID
		"dev",
		ChainType::Development,
		move || {
			let pallet_system_contract_deployer_id =
			<laguna_runtime::Runtime as pallet_system_contract_deployer::Config>::PalletId::get()
				.try_into_account().expect("Invalid PalletId");

			testnet_genesis(
				wasm_binary,
				// Initial PoA authorities
				vec![authority_keys_from_seed("Alice"), authority_keys_from_seed("Bob")],
				// Sudo account
				get_account_id_from_seed::<sr25519::Public>("Alice"),
				vec![
					get_account_id_from_seed::<sr25519::Public>("Alice"),
					get_account_id_from_seed::<sr25519::Public>("Bob"),
					get_account_id_from_seed::<sr25519::Public>("Charlie"),
					get_account_id_from_seed::<sr25519::Public>("Dave"),
					get_account_id_from_seed::<sr25519::Public>("Eve"),
					get_account_id_from_seed::<sr25519::Public>("Ferdie"),
					get_account_id_from_seed::<sr25519::Public>("Alice//stash"),
					get_account_id_from_seed::<sr25519::Public>("Bob//stash"),
					get_account_id_from_seed::<sr25519::Public>("Charlie//stash"),
					get_account_id_from_seed::<sr25519::Public>("Dave//stash"),
					get_account_id_from_seed::<sr25519::Public>("Eve//stash"),
					get_account_id_from_seed::<sr25519::Public>("Ferdie//stash"),
					pallet_system_contract_deployer_id,
				], // prefund accounts
				vec![],
			)
		},
		// Bootnodes
		vec![],
		// Telemetry
		None,
		// Protocol ID
		None,
		// Properties
		None,
		// Extensions
		Some(laguna_chain_spec_properties()),
		None,
	))
}

// TODO: adjust when expanding runtime
fn testnet_genesis(
	wasm_binary: &[u8],
	initial_authorities: Vec<(AuraId, GrandpaId)>,
	root_key: AccountId,
	endowed_accounts: Vec<AccountId>,
	endowed_eth_addresses: Vec<H160>,
) -> GenesisConfig {
	// generated by construct_runtime! macro
	GenesisConfig {
		system: SystemConfig {
			// add Wasm runtime to storage.
			code: wasm_binary.to_vec(),
		},
		aura: AuraConfig {
			// allowed sudo account to participate in PoA with AURA
			authorities: initial_authorities.iter().map(|x| (x.0.clone())).collect(),
		},
		grandpa: GrandpaConfig {
			// allowed sudo account to participate in block finalization with GRANDPA
			authorities: initial_authorities.iter().map(|x| (x.1.clone(), 1)).collect(),
		},
		transaction_payment: Default::default(),
		sudo: SudoConfig {
			// assign network admin rights.
			key: Some(root_key),
		},
		tokens: TokensConfig {
			balances: {
				let mut balances = vec![];

				// init supploy of 1B
				let mut init_supply = LAGUNAS * 10_u128.pow(9);

				let endowed_amount = LAGUNAS * 10_u128.pow(3);

				let treasury_account: AccountId =
					TreasuryPalletId::get().try_into_account().unwrap();

				// prefund normal account
				for acc in endowed_accounts {
					balances.push((acc, LAGUNA_NATIVE_CURRENCY, endowed_amount));
					init_supply = init_supply.checked_sub(endowed_amount).unwrap();
				}

				// prefund account behind eth addresses too
				for acc in endowed_eth_addresses.iter().map(|a| EvmCompat::to_mapped_account(*a)) {
					balances.push((acc, LAGUNA_NATIVE_CURRENCY, endowed_amount));
					init_supply = init_supply.checked_sub(endowed_amount).unwrap();
				}

				balances.push((treasury_account, LAGUNA_NATIVE_CURRENCY, init_supply));

				balances
			},
		},
		fee_enablement: FeeEnablementConfig {
			enabled: vec![(CurrencyId::NativeToken(TokenId::Laguna), true)],
		},
		treasury: TreasuryConfig {},
		system_contract_deployer: Default::default(),
	}
}
